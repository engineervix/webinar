include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

stages:
  - lint
  - test
  - prepare
  - release
  - pages

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# These folders are cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  - key: "$CI_PROJECT_ID"
    paths:
      - .cache/pip
  - key: virtualenv
    paths:
      - .venv/
  - key:
      files:
        - package-lock.json
    paths:
      - .npm/

ruff:
  stage: lint
  image: python:3.13-slim-bookworm
  before_script:
    - pip install ruff
  script:
    - ruff check . --output-format=gitlab

black:
  stage: lint
  image: python:3.13-slim-bookworm
  before_script:
    - pip install black
  script:
    - black . --check

djlint:
  image: python:3.13-slim-bookworm
  stage: lint
  before_script:
    - pip install djlint
  script:
    - find webinar/ -name '*.html' -o -name '*.mjml' | xargs djlint --check

stylelint:
  stage: lint
  image: node:20.12-bookworm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:style

eslint:
  stage: lint
  image: node:20.12-bookworm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:js

prettier:
  stage: lint
  image: node:20.12-bookworm
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:format

python_tests:
  stage: test
  image: python:3.13-slim-bookworm
  services:
    - postgres:15.6
  variables:
    POSTGRES_DB: test_postgres_db
    POSTGRES_USER: test_postgres_user
    POSTGRES_PASSWORD: custom_pass
    DATABASE_URL: "postgres://test_postgres_user:custom_pass@postgres/test_postgres_db"
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - ln -fs /usr/share/zoneinfo/Africa/Lusaka /etc/localtime
    - dpkg-reconfigure --frontend noninteractive tzdata
    - apt-get update -y
    - apt-get install -y --no-install-recommends
      build-essential
      curl
      git
      gnupg
      libmagic1
      libpq-dev
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - export PGUSER=$POSTGRES_USER
    - python -m venv ~/venv
    - source ~/venv/bin/activate
    - export LC_ALL=C.UTF-8
    - export LANG=C.UTF-8
    - pip install --upgrade pip
    - python -m pip install poetry==1.8.2
    - poetry install --with dev,test,docs
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    - npm ci --cache .npm --prefer-offline
    - npm run build:prod
    - touch .env
    - echo "DJANGO_SECRET_KEY=secret" >> .env
    - echo "DEBUG=False" >> .env
    - echo "ALLOWED_HOSTS=" >> .env
    - echo "BASE_URL=www.example.com" >> .env
    - ./manage.py collectstatic --noinput --clear
  script:
    # Run system checks
    - ./manage.py check

    # Check for missing migrations
    - ./manage.py makemigrations --check --noinput

    # Create cache table.
    - ./manage.py createcachetable

    # Run back-end tests
    - pytest
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

prepare:
  stage: prepare # This stage must run before the release stage
  image: python:3.13-slim-bookworm
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "TODAY=($(TZ=Africa/Lusaka date --iso))" >> variables.env # Generate the TODAY environment variable
    - python -m pip install --upgrade pip
    - python -m pip install invoke colorama tomli
    - invoke get-release-notes
    - mv -v ../LATEST_RELEASE_NOTES.md .
  artifacts:
    paths:
      - LATEST_RELEASE_NOTES.md
    reports:
      dotenv: variables.env

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created
  script:
    - echo "Creating a Gitlab Release for $CI_COMMIT_TAG"
  release: # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    name: "$CI_COMMIT_TAG $TODAY"
    description: LATEST_RELEASE_NOTES.md
    tag_name: "$CI_COMMIT_TAG"

# https://docs.gitlab.com/ee/user/project/pages/pages_access_control.html
pages:
  image: python:3.13-slim-bookworm
  stage: pages
  variables:
    GIT_DEPTH: 0
  only:
    refs:
      - main
    changes:
      - docs/**/*
      - mkdocs.yml
  before_script:
    - apt-get update -y
    - apt-get install -y --no-install-recommends git
    - python -m venv ~/venv
    - source ~/venv/bin/activate
    - pip install --upgrade pip
    - python -m pip install poetry==1.8.2
    - poetry install --only docs --no-root
  script:
    - mkdocs build
    - cp -vr site public
    # optionally, you can activate gzip support with the following line:
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec gzip -f -k {} \;

  artifacts:
    paths:
      - public
